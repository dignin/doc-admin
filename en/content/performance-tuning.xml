<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="performance-tuning">
    <title>Performance Tuning</title>

    <abstract>
    <para>
    Presented below is a list of performance enhancing techniques for your OTRS installation, including configuration, coding, memory use, and more.
    </para>
    </abstract>

    <section id="performance-tuning-otrs">
        <title>OTRS</title>
        <para>
        There are several options for improving OTRS performance.
        </para>

        <section id="performance-tuning-otrs-index">
            <title>TicketIndexModule</title>
            <para>
                There are two backend modules for the index for the ticket queue view:

                <itemizedlist>

                    <listitem>
                        <para>
                        Using Kernel::System::Ticket::IndexAccelerator::RuntimeDB (default), generate each queue view on the fly from the ticket table. You will not have performance trouble until you have about 60,000 open tickets in your system.
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                        Kernel::System::Ticket::IndexAccelerator::StaticDB, the most powerful module, should be used when you have above 80,000 open tickets. It uses an extra ticket_index table, which works like a view. Use <filename>bin/otrs.Console.pl Maint::Ticket::QueueIndexRebuild</filename> for generating an initial index after switching backends.
                        </para>
                    </listitem>

                </itemizedlist>

                You can change the IndexAccelerator via SysConfig.
            </para>

        </section>

        <section id="performance-tuning-otrs-storage">
            <title>TicketStorageModule</title>
            <para>
            There are two different backend modules for the ticket/article storage:
            </para>

            <para>
            <itemizedlist>

                <listitem>
                <para>
                Configure Kernel::System::Ticket::ArticleStorageDB (default) to store attachments, etc., in the database. Note: Don't use it with large setups.
                </para>
                <para>
                Pro: If your webserver user isn't the 'otrs' user, use this module to avoid file permission problems.
                </para>
                <para>
                Con: It is not advisable to store attachments in your database. Take care that your database is able to store large objects. E.g. Configure MySQL with "set-variable = max_allowed_packet=8M" to store 8 MB objects (the default is 2M).
                </para>
                </listitem>

                <listitem>
                <para>
                Configure Kernel::System::Ticket::ArticleStorageFS to store attachments etc. on the local file system. Note: Recommended for large setups.
                </para>
                <para>
                Pro: It is fast!
                </para>
                <para>
                Con: Your web server user should be the 'otrs' user. Also, if you have multiple front-end servers, you should make sure the filesystem is shared between the servers. Place it on an NFS share or preferably a SAN or similar solution.
                </para>
                </listitem>

            </itemizedlist>

            </para>

            <para>
                Note: you can switch from one back-end to the other on the fly. You can switch the backend in the SysConfig, and then run the command line utility <filename>bin/otrs.Console.pl Admin::Article::StorageSwitch</filename> to put the articles from the database onto the filesystem or the other way around. You can use the <emphasis>--target</emphasis> options to specify the target back-ends. Please note that the entire process can take considerable time to run, depending on the number of articles you have and the available CPU power and/or network capacity.
            </para>

            <para>
                <screen><![CDATA[
shell> bin/otrs.Console.pl Admin::Article::StorageSwitch --target ArticleStorageFS
                ]]></screen>
                <emphasis>Script: Switching storage back-ends from database to filesystem.</emphasis>
            </para>
            <para>
                If you want to keep old attachments in the database, you can activate the SysConfig option
                <literal>Ticket::StorageModule::CheckAllBackends</literal> to make sure OTRS will still find them.
            </para>
        </section>

        <section>
            <title>Archiving Tickets</title>

            <para>
                As OTRS can be used as an audit-proof system, deleting closed tickets may not be a good idea. Therefore we implemented a feature that allows you to archive tickets.
            </para>
            <para>
                Tickets that match certain criteria can be marked as "archived". These tickets are not accessed if you do a regular ticket search or run a Generic Agent job. The system itself does not have to deal with a huge amount of tickets any longer as only the "latest" tickets are taken into consideration when using OTRS. This can result in a huge performance gain on large systems.
            </para>
            <para>
                To use the archive feature simply follow these steps:
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        Activate the archive system in SysConfig
                    </para>
                    <para>
                        In the Admin page, go to SysConfig and select the group <literal>Ticket</literal>. In <literal>Core::Ticket</literal> you find the option <literal>Ticket::ArchiveSystem</literal> which is set to "no" by default. Change this setting to "yes" and save this change.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Define a GenericAgent job
                    </para>
                    <para>
                        On the Admin page, select GenericAgent and add a new job there.
                        <orderedlist>
                            <listitem>
                                <para>
                                    Job Settings
                                </para>
                                <para>
                                    Provide a name for the archiving job, and select proper options to schedule this job.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Ticket Filter
                                </para>
                                <para>
                                    The ticket filter is searches for tickets that match the selected criteria. It might be a good idea to only archive those tickets in a closed state that have been closed a few months before.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Ticket Action
                                </para>
                                <para>
                                    In this section, set the field labeled "Archive selected tickets" to "archive tickets".
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Save the job
                                </para>
                                <para>
                                    At the end of the page you will find an option to save the job.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Affected tickets
                                </para>
                                <para>
                                    The system will display all tickets which will be archived when executing the Generic Agent job.
                                </para>
                            </listitem>
                        </orderedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Ticket Search
                    </para>
                    <para>
                        When you search for tickets, the system default is to search tickets which are not archived. If you want to search through archived tickets also, simply add "archive search" while defining search criteria.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section id="performance-tuning-otrs-cache">
            <title>Cache</title>
            <para>
                OTRS caches a lot of temporary data in <filename>/opt/otrs/var/tmp</filename>.
                Please make sure that this uses a high performance file system/storage.
                If you have enough RAM, you can also try to put this directory on a ramdisk like this:
                <screen><![CDATA[
shell> /opt/otrs/bin/otrs.Console.pl Maint::Session::DeleteAll
shell> /opt/otrs/bin/otrs.Console.pl Maint::Cache::Delete
shell> sudo mount -o size=16G -t tmpfs none /opt/otrs/var/tmp

# add persistent mount point in /etc/fstab
                ]]></screen>
            </para>
            <note>
                <para>
                    Please note that this will be a non-permanent storage that will be lost on server reboot.
                    All your sessions (if you store them in the filesystem) and your cache data will be lost.
                </para>
            </note>
            <para>
                There is also a centralized memcached based Cache backend available for purchase from OTRS Group.
            </para>
        </section>

    </section>


    <section id="performance-tuning-database">
        <title>Database</title>
        <para>
        DB issues vary by the database being used. Study the documentation for your database or check with your database administrator.
        </para>

        <section id="performance-tuning-database-mysql">
            <title>MySQL</title>
            <para>
            If you use the MySQL table type MyISAM (which is the default), and have deleted a large part of a table or if you have made many changes to a table with variable-length rows (tables that have VARCHAR, BLOB or TEXT columns), you must defragment the datafile (tables) with the "optimize" command.
            </para>
            <para>
            You should try this if the mysqld daemon needs a lot of your CPU time. Optimize the tables - ticket, ticket_history and article (see Script below).
            </para>

            <para>
            <screen><![CDATA[
shell> mysql -u user -p database
mysql> optimize table ticket;
mysql> optimize table ticket_history;
mysql> optimize table article;
            ]]></screen>
            </para>

            <para>
            <emphasis>Script: Optimizing data base tables.</emphasis>
            </para>

        </section>

        <section id="performance-tuning-database-postgresql">
            <title>PostgreSQL</title>
            <para>
            PostgreSQL is best tuned by modifying the postgresql.conf file in your PostgreSQL data directory. For advice on how to do this, reference the following articles:
            </para>

            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                        <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
                        <citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
                        </ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
                        <citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
                        </ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
                        <citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
                        </ulink>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>

            <para>
            If performance is still not satisfactory, we suggest that you join the PostgreSQL Performance mailing list ( <ulink url="http://www.postgresql.org/community/lists/">http://www.postgresql.org/community/lists/</ulink> ), and ask questions there. The folks on the PostgreSQL list are very friendly and can probably help.
            </para>
        </section>

    </section>

    <section id="performance-tuning-webserver">
        <title>Webserver</title>
        <para>
        Of course you should use mod_perl 2.0 ( <ulink url="http://perl.apache.org/"><citetitle>http://perl.apache.org/</citetitle></ulink> ). It's much faster (~ * 100) than pure cgi. But it needs more RAM.
        </para>

        <section id="performance-tuning-webserver-db">
            <title>Pre-established database connections</title>
            <para>
            You can have the database connections pre-established on startup of the web server. This saves time (see README.webserver).
            </para>
        </section>

        <section id="performance-tuning-webserver-startup">
            <title>Preloaded modules - startup.pl</title>
            <para>
            Use the startup script <filename>scripts/apache2-perl-startup.pl</filename> for preloaded/precompiled Perl modules on your mod_perl webserver to be faster, with a smaller memory footprint (see README.webserver).
            </para>
        </section>
        <section id="performance-tuning-webserver-reload">
            <title>Reload Perl modules when updated on disk</title>
            <para>
            By default Apache::Reload is used in <filename>scripts/apache2-httpd.include.conf</filename>. Disable it and you will get 8% more speed. But remember to restart the web server if you install any modules via the OTRS Package Manager, or any values in your SysConfig or in <filename>Kernel/Config.pm</filename>. Important: this would also mean you can't use the OTRS Package Manager via the web interface, you need to use the command line variant - <filename>bin/otrs.PackageManager.pl</filename>.
            </para>
        </section>

        <section id="performance-tuning-webserver-strategy">
            <title>Choosing the Right Strategy</title>
            <para>
            If you have a larger installation, e.g. over 1,000 new tickets per day and over 40 agents, it is a good idea to read the chapters on Performance of the mod_perl User's Guide ( <ulink url="http://perl.apache.org/docs/2.0/user/index.html"><citetitle>http://perl.apache.org/docs/2.0/user/index.html</citetitle></ulink> ).
            </para>
        </section>

        <section id="performance-tuning-webserver-gzip">
            <title>mod_gzip/mod_deflate</title>
            <para>
            If your bandwidth is small, use mod_deflate for Apache2. If you have an html page with 45k, mod_gzip/mod_deflate compresses it to about 7k. The drawback is that this increases the load on the server side.
            </para>
        </section>

    </section>

</chapter>
